val scheduleDf = scheduleListdata.select("volumeCollectionId", "collectionId", "downstream_partner_id").where(col("downstream_partner_id") =!= "").dropDuplicates()
val scheduleDf_new = scheduleDf.groupBy("volumeCollectionId", "collectionId").count()
volumedata
    .as("v")
    .join(volumeIOdata.as("vio"), col("v.id") === col("vio.volumeId") && col("v.collectionId") === col("vio.collectionId"), "left")
    //.join(volColldata.as("vc"), col("v.volcoll_id") === col("vc.id") && col("v.collectionId") === col("vc.collectionId"), "left")
    .join(scheduleDf_new.as("sl"), col("sl.volumeCollectionId") === col("v.volcoll_id") && col("v.collectionId") === col("sl.collectionId"), "left")
    .join(dt2systemdataset.as("syt"), col("v.systemId") === col("syt.id") && col("v.collectionId") === col("syt.collectionId"), "left")
    .join(costAndLocationData.as("costLocdt2"), col("v.systemId") === col("costLocdt2.arrayId") && col("v.customerId") === col("costLocdt2.customerId"), "left")
    .filter(col("clone1") === false)
    .select(
        col("v.id") as "volume_id",
        col("v.customerId") as "customer_id",
        col("v.systemId") as "system_id",
        col("syt.name") as "system_name",
        col("v.volcoll_id") as "vol_coll_id",
        col("v.name") as "name",
        col("v.total_usage_bytes").cast("Double") as "capacity_used",
        (col("v.size") - col("v.total_usage_bytes")).cast("Double") as "capacity_free",
        col("v.size").cast("Double") as "capacity_total",
        when(col("v.thinly_provisioned") === "true", "Thin").otherwise("Thick").alias("prov_type"),
        when((col("vio.iops.total.avg_latest") > 0), true).otherwise(false).alias("active"),
        lit(true) as "is_connected",
        when((col("v.protection_type") === "remote" && (col("v.replication_role") === "synchronous_downstream" || col("v.replication_role") === "periodic_snapshot_downstream")), true).otherwise(false).alias("is_replicated"),
        when(col("sl.count") > 1, true).otherwise(false).alias("has_multiple_replication_partners"),
        col("v.perfpolicy_id") as "app_id",
        col("v.perfpolicy_name") as "app_name", 
        
        when(col("costLocdt2.depreciationStartDate").isNull, 0.00).
            when(date_format(current_timestamp(), "yyyy-MM-dd") < add_months(to_timestamp(col("costLocdt2.depreciationStartDate"), "yyyy-MM-dd HH:mm:ss.SSSSSSSSS Z z"), 
            col("costLocdt2.monthsToDepreciate")), round((col("costLocdt2.cost") / col("syt.usable_capacity_bytes") * col("v.total_usage_bytes")),2)).otherwise(0.00).alias("cost"),
        when(col("costLocdt2.depreciationStartDate").isNull, 0.00).
            when(date_format(current_timestamp(), "yyyy-MM-dd") < add_months(to_timestamp(col("costLocdt2.depreciationStartDate"), "yyyy-MM-dd HH:mm:ss.SSSSSSSSS Z z"), col("costLocdt2.monthsToDepreciate")), 
            round((col("costLocdt2.cost") / (col("syt.usable_capacity_bytes") / 1073741824)),2)).otherwise(0.00).alias("cost_per_gb"),
        when(col("costLocdt2.currencyType").isNull,"").otherwise(col("costLocdt2.currencyType")).alias("currency"),
        when(col("costLocdt2.city").isNull,"").otherwise(col("costLocdt2.city")).alias("city"),
        when(col("costLocdt2.country").isNull,"").otherwise(col("costLocdt2.country")).alias("country"),
        when(col("costLocdt2.state").isNull,"").otherwise(col("costLocdt2.state")).alias("state"),
        when(col("costLocdt2.postalCode").isNull, 0).otherwise(col("costLocdt2.postalCode")).alias("postal_code"),
        
        lit("") as "loc_lattitude",
        lit("") as "loc_longitude",
        col("vio.iops.total.avg_latest") as "io_activity",
        col("v.creation_time") as "creation_time",
        to_timestamp(col("v.collectionTimeUTC"), "yyyy-MM-dd HH:mm:ss.SSSSSSSSS Z z").cast("Long") * 1000 as "update_time",
        col("v.partitionKey") as "partitionKey",
        col("v.collectionId") as "collection_id"
).as[RDBVolumes]  


? new Logic
col("v.total_usage_bytes").cast("Double") as "capacity_used",
(col("v.size")*1048576 - col("v.total_usage_bytes")).cast("Double") as "capacity_free",
(col("v.size")*1048576).cast("Double") as "capacity_total",

when(col("costLocdt2.depreciationStartDate").isNull, 0.00).
    when(date_format(current_timestamp(), "yyyy-MM-dd") < add_months(to_timestamp(col("costLocdt2.depreciationStartDate"), "yyyy-MM-dd HH:mm:ss.SSSSSSSSS Z z"), col("costLocdt2.monthsToDepreciate")), 
    round((col("costLocdt2.cost") / (col("syt.usable_capacity_bytes") / 1000000000)),2)).otherwise(0.00).alias("cost_per_gb"),